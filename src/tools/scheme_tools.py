from typing import Optional
from mcp.types import TextContent
from src.services.scheme_search import SchemeSearchService
from ..models.base import RichToolDescription
import json
import logging

logger = logging.getLogger(__name__)

def register_scheme_tools(mcp):
    """Register scheme search tools with the MCP server."""
    
    scheme_service = SchemeSearchService()
    
    # Create rich descriptions for tools
    search_schemes_desc = RichToolDescription(
        description="AI-powered semantic search for government schemes with comprehensive filtering options",
        use_when="User needs to find relevant government schemes based on criteria like demographics, location, or specific needs",
        side_effects="Makes database queries to search scheme information"
    )
    
    categories_desc = RichToolDescription(
        description="Get all available government scheme categories",
        use_when="User needs to know what categories of schemes are available (e.g., Education, Agriculture, Health)",
        side_effects=None
    )
    
    states_desc = RichToolDescription(
        description="Get all available states/regions for government schemes",
        use_when="User needs to know which states or regions have specific schemes available",
        side_effects=None
    )

    # Convert rich descriptions to JSON strings for the tool decorators
    search_desc_json = search_schemes_desc.model_dump_json()
    categories_desc_json = categories_desc.model_dump_json()
    states_desc_json = states_desc.model_dump_json()

    @mcp.tool(description=search_desc_json)
    async def search_government_schemes(
        query: str,
        state: Optional[str] = None,
        category: Optional[str] = None,
        gender: Optional[str] = None,
        caste: Optional[str] = None,
        is_bpl: Optional[bool] = None,
        is_student: Optional[bool] = None,
        is_minority: Optional[bool] = None,
        is_differently_abled: Optional[bool] = None,
        age_min: Optional[int] = None,
        age_max: Optional[int] = None,
        limit: int = 10,
        language: Optional[str] = None
    ) -> list[TextContent]:
        logger.info(f"search_government_schemes tool called with query={query}, state={state}, category={category}, gender={gender}, caste={caste}, is_bpl={is_bpl}, is_student={is_student}, is_minority={is_minority}, is_differently_abled={is_differently_abled}, age_min={age_min}, age_max={age_max}, limit={limit}, language={language}")
        """
        Search government schemes using AI-powered semantic search with optional filters.
        
        This tool uses vector embeddings to find relevant government schemes based on:
        - Natural language queries (e.g., "scholarship for students", "agriculture support")
        - Optional filters for state, category, demographics, etc.
        
        Args:
            query: Natural language search query describing what you're looking for in any language
            state: Optional state/region filter (e.g., "Gujarat", "All")
            category: Optional category filter (e.g., "Education", "Agriculture")
            gender: Optional gender filter ("male", "female", "transgender")
            caste: Optional caste category (e.g., "sc", "st", "obc", "general")
            is_bpl: Optional Below Poverty Line filter (True/False)
            is_student: Optional student filter (True/False)
            is_minority: Optional minority community filter (True/False)
            is_differently_abled: Optional disability filter (True/False)
            age_min: Optional minimum age requirement
            age_max: Optional maximum age requirement
            limit: Maximum number of results to return (default: 10)
            language: Optional language code of the input query (e.g., "hi" for Hindi, "mr" for Marathi). Auto-detects if not provided.
            
        Returns:
            List of matching government schemes with details and similarity scores
        """
        try:
            logger.info(f"Searching schemes with query: '{query}' and filters")
            
            results = await scheme_service.search_schemes(
                query=query,
                state=state,
                category=category,
                gender=gender,
                caste=caste,
                is_bpl=is_bpl,
                is_student=is_student,
                is_minority=is_minority,
                is_differently_abled=is_differently_abled,
                age_min=age_min,
                age_max=age_max,
                limit=limit,
                source_lang=language
            )
            
            if "error" in results:
                return [TextContent(
                    type="text",
                    text=f"‚ùå Search Error: {results['error']}"
                )]
            
            if not results["results"]:
                return [TextContent(
                    type="text",
                    text=f"üîç No schemes found for query: '{query}'\n\n" +
                          f"Filters applied: {json.dumps(results['filters_applied'], indent=2)}\n\n" +
                          "Try:\n" +
                          "- Broader search terms\n" +
                          "- Different filter combinations\n" +
                          "- Removing some filters"
                )]                # Format results for display
            # Handle title translation based on language
            title = "Government Schemes Search Results"
            query_label = "Query"
            found_label = "Found"
            schemes_label = "matching schemes"
            
            if language == "mr":
                title = "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§Ç‡§ö‡•á ‡§∂‡•ã‡§ß ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ"
                query_label = "‡§∂‡•ã‡§ß"
                found_label = "‡§∏‡§æ‡§™‡§°‡§≤‡•á"
                schemes_label = "‡§ú‡•Å‡§≥‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ"
            elif language == "hi":
                title = "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§ñ‡•ã‡§ú ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ"
                query_label = "‡§ñ‡•ã‡§ú"
                found_label = "‡§Æ‡§ø‡§≤‡•á"
                schemes_label = "‡§Æ‡§ø‡§≤‡§§‡•Ä-‡§ú‡•Å‡§≤‡§§‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç"
            
            response_parts = [
                f"üéØ **{title}**",
                f"üìù **{query_label}:** '{query}'",
                f"üìä **{found_label}** {results['total_count']} {schemes_label}",
                ""
            ]
            
            # Add applied filters with translations
            filters_title = "Applied Filters"
            if language == "mr":
                filters_title = "‡§≤‡§æ‡§ó‡•Ç ‡§ï‡•á‡§≤‡•á‡§≤‡•á ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞"
            elif language == "hi":
                filters_title = "‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§ø‡§è ‡§ó‡§è ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞"
                
            applied_filters = {k: v for k, v in results['filters_applied'].items() if v is not None}
            if applied_filters:
                response_parts.append(f"üîß **{filters_title}:**")
                filter_translations = {
                    'state': '‡§∞‡§æ‡§ú‡•ç‡§Ø' if language in ["mr", "hi"] else 'State',
                    'category': '‡§∂‡•ç‡§∞‡•á‡§£‡•Ä' if language in ["mr", "hi"] else 'Category',
                    'gender': '‡§≤‡§ø‡§Ç‡§ó' if language in ["mr", "hi"] else 'Gender',
                    'caste': '‡§ú‡§æ‡§§' if language in ["mr", "hi"] else 'Caste',
                    'is_bpl': '‡§¨‡•Ä‡§™‡•Ä‡§è‡§≤' if language in ["mr", "hi"] else 'BPL',
                    'is_student': '‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§∞‡•ç‡§•‡•Ä' if language in ["mr", "hi"] else 'Student',
                    'is_minority': '‡§Ö‡§≤‡•ç‡§™‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§Ç‡§ï' if language in ["mr", "hi"] else 'Minority',
                    'is_differently_abled': '‡§¶‡§ø‡§µ‡•ç‡§Ø‡§æ‡§Ç‡§ó' if language in ["mr", "hi"] else 'Differently Abled'
                }
                for key, value in applied_filters.items():
                    translated_key = filter_translations.get(key, key)
                    response_parts.append(f"  ‚Ä¢ {translated_key}: {value}")
                response_parts.append("")
            
            # Add scheme results with translations
            schemes_title = "Matching Schemes"
            if language == "mr":
                schemes_title = "‡§ú‡•Å‡§≥‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ"
            elif language == "hi":
                schemes_title = "‡§Æ‡§ø‡§≤‡§§‡•Ä-‡§ú‡•Å‡§≤‡§§‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç"
                
            response_parts.append(f"üìã **{schemes_title}:**")
            response_parts.append("")
            
            for i, scheme in enumerate(results["results"], 1):
                similarity_percentage = (1 - scheme["similarity_score"]) * 100
                
                scheme_info = [
                    f"**{i}. {scheme['name']}** (Match: {similarity_percentage:.1f}%)",
                    f"üèõÔ∏è **State:** {scheme['state']}",
                    f"üìÇ **Category:** {scheme['category']}",
                    f"üìù **Description:** {scheme['description'][:200]}{'...' if len(scheme['description']) > 200 else ''}",
                ]
                
                # Add demographic info with translations
                demographic_info = []
                
                # Define translations
                translations = {
                    'mr': {
                        'Gender': '‡§≤‡§ø‡§Ç‡§ó',
                        'Caste': '‡§ú‡§æ‡§§',
                        'BPL eligible': '‡§¨‡•Ä‡§™‡•Ä‡§è‡§≤ ‡§™‡§æ‡§§‡•ç‡§∞',
                        'For students': '‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§∞‡•ç‡§•‡•ç‡§Ø‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä',
                        'For minorities': '‡§Ö‡§≤‡•ç‡§™‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä',
                        'For differently abled': '‡§¶‡§ø‡§µ‡•ç‡§Ø‡§æ‡§Ç‡§ó‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä'
                    },
                    'hi': {
                        'Gender': '‡§≤‡§ø‡§Ç‡§ó',
                        'Caste': '‡§ú‡§æ‡§§‡§ø',
                        'BPL eligible': '‡§¨‡•Ä‡§™‡•Ä‡§è‡§≤ ‡§™‡§æ‡§§‡•ç‡§∞',
                        'For students': '‡§õ‡§æ‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è',
                        'For minorities': '‡§Ö‡§≤‡•ç‡§™‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è',
                        'For differently abled': '‡§¶‡§ø‡§µ‡•ç‡§Ø‡§æ‡§Ç‡§ó‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è'
                    }
                }
                
                lang_dict = translations.get(language, {})
                
                if scheme['gender']:
                    label = lang_dict.get('Gender', 'Gender')
                    demographic_info.append(f"{label}: {scheme['gender']}")
                if scheme['caste']:
                    label = lang_dict.get('Caste', 'Caste')
                    demographic_info.append(f"{label}: {scheme['caste']}")
                if scheme['is_bpl']:
                    demographic_info.append(lang_dict.get('BPL eligible', 'BPL eligible'))
                if scheme['is_student']:
                    demographic_info.append(lang_dict.get('For students', 'For students'))
                if scheme['is_minority']:
                    demographic_info.append(lang_dict.get('For minorities', 'For minorities'))
                if scheme['is_differently_abled']:
                    demographic_info.append(lang_dict.get('For differently abled', 'For differently abled'))
                
                if demographic_info:
                    scheme_info.append(f"üë• **Eligibility:** {', '.join(demographic_info)}")
                
                if scheme['url']:
                    scheme_info.append(f"üîó **More Info:** {scheme['url']}")
                
                if scheme['tags']:
                    scheme_info.append(f"üè∑Ô∏è **Tags:** {scheme['tags']}")
                
                response_parts.extend(scheme_info)
                response_parts.append("")
            
            # Add usage tips with translations
            if language == "mr":
                response_parts.extend([
                    "üí° **‡§ö‡§æ‡§Ç‡§ó‡§≤‡•ç‡§Ø‡§æ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§ü‡§ø‡§™‡•ç‡§∏:**",
                    "‚Ä¢ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§µ‡§æ‡§™‡§∞‡§æ (‡§â‡§¶‡§æ., '‡§∂‡§ø‡§∑‡•ç‡§Ø‡§µ‡•É‡§§‡•ç‡§§‡•Ä', '‡§∂‡•á‡§§‡•Ä', '‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø')",
                    "‚Ä¢ ‡§≤‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§è‡§ï‡§§‡•ç‡§∞ ‡§ï‡§∞‡§æ",
                    "‚Ä¢ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§® ‡§Æ‡§ø‡§≥‡§æ‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§µ‡•á‡§ó‡§µ‡•á‡§ó‡§≥‡•á ‡§∂‡•ã‡§ß ‡§∂‡§¨‡•ç‡§¶ ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® ‡§™‡§π‡§æ",
                    "‚Ä¢ ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡•á‡§ö‡•ç‡§Ø‡§æ ‡§§‡§™‡§∂‡•Ä‡§≤‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•ã‡§ú‡§®‡•á‡§ö‡•á URLs ‡§§‡§™‡§æ‡§∏‡§æ"
                ])
            elif language == "hi":
                response_parts.extend([
                    "üí° **‡§¨‡•á‡§π‡§§‡§∞ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§ù‡§æ‡§µ:**",
                    "‚Ä¢ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç (‡§ú‡•à‡§∏‡•á, '‡§õ‡§æ‡§§‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡§ø', '‡§ï‡•É‡§∑‡§ø', '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø')",
                    "‚Ä¢ ‡§≤‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§∏‡§Ç‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
                    "‚Ä¢ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§®‡•á ‡§™‡§∞ ‡§Ö‡§≤‡§ó ‡§ñ‡•ã‡§ú ‡§∂‡§¨‡•ç‡§¶ ‡§Ü‡§ú‡§º‡§Æ‡§æ‡§è‡§Ç",
                    "‚Ä¢ ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡•ã‡§ú‡§®‡§æ URLs ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç"
                ])
            else:
                response_parts.extend([
                    "üí° **Tips for better results:**",
                    "‚Ä¢ Use specific keywords (e.g., 'scholarship', 'agriculture', 'health')",
                    "‚Ä¢ Combine filters for targeted results",
                    "‚Ä¢ Try different search terms if no results found",
                    "‚Ä¢ Check scheme URLs for detailed eligibility criteria"
                ])
            
            result = [TextContent(
                type="text",
                text="\n".join(response_parts)
            )]
            logger.info(f"search_government_schemes tool output: {result[0].text[:200]}..." if len(result[0].text) > 200 else f"search_government_schemes tool output: {result[0].text}")
            return result
            
        except Exception as e:
            logger.error(f"Error in search_government_schemes: {e}")
            return [TextContent(
                type="text",
                text=f"‚ùå Unexpected error occurred: {str(e)}"
            )]
    
    @mcp.tool(description=categories_desc_json)
    async def get_scheme_categories() -> list[TextContent]:
        logger.info("get_scheme_categories tool called")
        """
        Get all available government scheme categories.
        
        This tool returns a list of all available categories for filtering schemes,
        such as Education, Agriculture, Health, etc.
        
        Returns:
            List of all available scheme categories
        """
        try:
            categories = await scheme_service.get_scheme_categories()
            
            if not categories:
                return [TextContent(
                    type="text",
                    text="‚ùå No categories found or database error"
                )]
            
            response_parts = [
                "üìÇ **Available Government Scheme Categories:**",
                "",
                f"üìä Total categories: {len(categories)}",
                ""
            ]
            
            # Group categories for better display
            for i, category in enumerate(categories, 1):
                response_parts.append(f"{i:2d}. {category}")
            
            response_parts.extend([
                "",
                "üí° **Usage:**",
                "Use these categories as the 'category' parameter in search_government_schemes",
                "Example: search_government_schemes('student support', category='Education & Learning')"
            ])
            
            result = [TextContent(
                type="text",
                text="\n".join(response_parts)
            )]
            logger.info(f"get_scheme_categories tool output: {result[0].text[:200]}..." if len(result[0].text) > 200 else f"get_scheme_categories tool output: {result[0].text}")
            return result
            
        except Exception as e:
            logger.error(f"Error in get_scheme_categories: {e}")
            return [TextContent(
                type="text",
                text=f"‚ùå Error fetching categories: {str(e)}"
            )]
    
    @mcp.tool(description=states_desc_json)
    async def get_scheme_states() -> list[TextContent]:
        logger.info("get_scheme_states tool called")
        """
        Get all available states/regions for government schemes.
        
        This tool returns a list of all available states and regions for filtering schemes.
        
        Returns:
            List of all available states/regions
        """
        try:
            states = await scheme_service.get_scheme_states()
            
            if not states:
                return [TextContent(
                    type="text",
                    text="‚ùå No states found or database error"
                )]
            
            response_parts = [
                "üó∫Ô∏è **Available States/Regions for Government Schemes:**",
                "",
                f"üìä Total states/regions: {len(states)}",
                ""
            ]
            
            # Group states for better display
            for i, state in enumerate(states, 1):
                response_parts.append(f"{i:2d}. {state}")
            
            response_parts.extend([
                "",
                "üí° **Usage:**",
                "Use these states as the 'state' parameter in search_government_schemes",
                "‚Ä¢ 'All' means schemes available across India",
                "‚Ä¢ Specific state names for state-specific schemes",
                "Example: search_government_schemes('farmer support', state='Gujarat')"
            ])
            
            result = [TextContent(
                type="text",
                text="\n".join(response_parts)
            )]
            logger.info(f"get_scheme_states tool output: {result[0].text[:200]}..." if len(result[0].text) > 200 else f"get_scheme_states tool output: {result[0].text}")
            return result
            
        except Exception as e:
            logger.error(f"Error in get_scheme_states: {e}")
            return [TextContent(
                type="text",
                text=f"‚ùå Error fetching states: {str(e)}"
            )]
